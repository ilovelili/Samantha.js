{"changed":true,"filter":false,"title":"StateMachine.js","tooltip":"/lib/SamanthaClosure/samantha/statemachine/StateMachine.js","value":"/**\n * @fileoverview This class is an implementation of a Moore state machine that is common in digital electronics, etc.\n *\n * The state machine is by it's nature an event-driven system. Events that come at the right state will put the state\n * machine in another expected state.\n *\n * To keep the implementation simple, many details are omitted. The state machine doesn't keep a record of its\n * states, new states cannot be added after a state machine is started, etc. These rules do not prevent\n * the functioning of the machine though.\n *\n * This class is a base class and not intended to be used on its own. To use a state machine, the developer has to\n * subclass this base class and override the <code>createStates_</code> method. This method should hold the\n * initialization of states in the state machine and should return the first state the machine should begin with.\n *\n * This implementation features lazy loading in the sense that the <code>createStates_</code> method is not called\n * until the first call to <code>startMachine</code> method.\n *\n * Example usage:\n * <code>\n *     Foo.MooreMachine = function(){\n *         goog.base(this);\n *     }\n *     goog.inherits(Foo.MooreMachine, SamanthaClosure.StateMachine);\n *\n *     // Having an enumerated type for events helps readability\n *     Foo.MooreMachine.Events = {\n *         CLICK: '0',\n *         DOUBLECLICK: '1'\n *     }\n *\n *     Foo.MooreMachine.prototype.createStates_ = function(){\n *         var STATE1 = new SamanthaClosure.State(function(){\n *             console.log(\"state 1\");\n *         });\n *\n *         var STATE2 = new SamanthaClosure.State(function(){\n *             console.log(\"state 2\");\n *         });\n *\n *         STATE1.transitions[Foo.MooreMachine.Events.CLICK] = STATE2;\n *         STATE2.transitions[Foo.MooreMachine.Events.DOUBLECLICK] = STATE1;\n *\n *         this.addState_(STATE1);\n *         this.addState_(STATE2);\n *\n *         return STATE1;\n *     }\n *\n *     var myMachine = new Foo.MooreMachine();\n *     myMachine.startMachine();\n */\n\ngoog.require('goog.array');\ngoog.require('goog.pubsub.PubSub');\ngoog.require('SamanthaClosure.State');\ngoog.provide('SamanthaClosure.StateMachine');\n\n\n\n/**\n * SamanthaClosure State Machine Class\n * @constructor\n * @extends {goog.pubsub.PubSub}\n */\nSamanthaClosure.StateMachine = function() {\n    goog.base(this);\n    /**\n     * @type {Array.<string>}\n     * @private\n     */\n    this.events_ = [];\n    this.currentState = undefined;\n};\ngoog.inherits(SamanthaClosure.StateMachine, goog.pubsub.PubSub);\n\n\n/**\n * Adds a state to the state machine.\n * @param {SamanthaClosure.State} state State to be added.\n * @protected\n */\nSamanthaClosure.StateMachine.prototype.addState = function(state) {\n    for (var event in state.transitions) {\n        goog.array.insert(this.events_, event);\n    }\n};\n\n\n/**\n * Sets the current state disregarding the previous one, and executes it's function.\n * @param {SamanthaClosure.State} state State to be set as the current state.\n * @param {Array.<*>=} opt_args Arguments to pass to the new state.\n * @protected\n */\nSamanthaClosure.StateMachine.prototype.setCurrentState = function(state, opt_args) {\n    opt_args = opt_args ||Â [];\n    this.currentState = state;\n    this.currentState.fn.apply(this, opt_args);\n};\n\n\n/**\n * Starts the state machine. If it's the first time this function is called, it also lazy loads the states via\n * <code>createStates</code> method.\n */\nSamanthaClosure.StateMachine.prototype.startMachine = function() {\n    if (this.currentState == undefined) {\n        this.firstState = this.createStates();\n        this.bindEvents_();\n        this.setCurrentState(this.firstState);\n    }\n};\n\n\nSamanthaClosure.StateMachine.prototype.reset = function() {\n    this.firstState && this.setCurrentState(this.firstState);\n};\n\n\n/**\n * This should be overridden by child classes. It holds the initialization of states and is called when the\n * <code>startMachine</code> method is called for the first time.\n * @return {SamanthaClosure.State} The first state that the machine will start with.\n */\nSamanthaClosure.StateMachine.prototype.createStates = goog.abstractMethod;\n\n\n/**\n * Subscribes its <code>handleEvent_</code> function to its every event\n * @private\n */\nSamanthaClosure.StateMachine.prototype.bindEvents_ = function() {\n    var self = this;\n    for (var i = 0, l = self.events_.length; i < l; i++) {\n        var eventName = self.events_[i];\n        self.subscribe(eventName, self.handleEvent_(self, eventName));\n    }\n};\n\n\n/**\n * Handles incoming events. If any of the events are in the transitions list for the current state, that transition's\n * target state becomes the current state.\n * @param {SamanthaClosure.StateMachine} self The State Machine instance (due to the nature of goog.pubsub.PubSub.subscribe,\n *                                 this function loses its scope. This variable corrects it).\n * @param {string} event The event to handle.\n * @return {function()} Returns a closure to use as an eventHandler.\n * @private\n */\nSamanthaClosure.StateMachine.prototype.handleEvent_ = function(self, event) {\n    return function() {\n        var nextState = self.currentState.transitions[event];\n        if (nextState) {\n            self.setCurrentState(nextState, Array.prototype.slice.call(arguments));\n        }\n    }\n};\n","undoManager":{"mark":-1,"position":23,"stack":[[{"group":"doc","deltas":[{"start":{"row":15,"column":37},"end":{"row":15,"column":38},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":36},"end":{"row":15,"column":37},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":35},"end":{"row":15,"column":36},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":35},"end":{"row":15,"column":36},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":36},"end":{"row":15,"column":37},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":37},"end":{"row":15,"column":38},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":21},"end":{"row":49,"column":22},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":19},"end":{"row":49,"column":20},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":19},"end":{"row":49,"column":20},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":21},"end":{"row":49,"column":22},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":37},"end":{"row":15,"column":38},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":36},"end":{"row":15,"column":37},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":35},"end":{"row":15,"column":36},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":35},"end":{"row":15,"column":36},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":36},"end":{"row":15,"column":37},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":15,"column":37},"end":{"row":15,"column":38},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":21},"end":{"row":49,"column":22},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":19},"end":{"row":49,"column":20},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":19},"end":{"row":49,"column":20},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":20},"end":{"row":49,"column":21},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":49,"column":21},"end":{"row":49,"column":22},"action":"insert","lines":["t"]}]}]]},"ace":{"folds":[],"scrolltop":1732,"scrollleft":0,"selection":{"start":{"row":122,"column":12},"end":{"row":122,"column":27},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":107,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1425195855518}