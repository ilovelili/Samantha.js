{"changed":true,"filter":false,"title":"DropDownListBuilder.js","tooltip":"/lib/SamanthaClosure/samantha/dropdownlist/DropDownListBuilder.js","value":"// Copyright 2011 Tart. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Builder class for dropdown lists.\n */\ngoog.require('tart.Builder');\ngoog.provide('tart.DropdownBuilder');\n\n\n\n/**\n * DropdownBuilder class builds the DOM for DropdownList class.\n *\n * @constructor\n * @extends {tart.Builder}\n * @param {string} id id for the builder. Can be used as the id of the DOM element this builder will build.\n * @return {tart.DropdownBuilder} A builder object.\n */\ntart.DropdownBuilder = function(id) {\n    goog.base(this, id);\n    this.owner = null;\n    return this;\n};\ngoog.inherits(tart.DropdownBuilder, tart.Builder);\n\n\n/**\n * Main namespace of HTML templates for DOM structure.\n */\ntart.DropdownBuilder.templates = {};\n\n\n/**\n * Select menu template.\n * @param {string} id Id of the container.\n * @param {string} optionListHTML HTML of the list of options.\n * @return {string} the container HTML.\n */\ntart.DropdownBuilder.templates.container = function(id, optionListHTML) {\n    return '<select id=\"' + id + '\">' + optionListHTML + '</select>';\n};\n\n\n/**\n * Generates a select menu element, converts it to a jQuery object and passes to this.$dom.\n *\n * @param {tart.Collection} owner Owner tart.Collection instance.\n */\ntart.DropdownBuilder.prototype.buildDOM = function(owner) {\n    this.owner = owner;\n    var opts = [];\n    for (var k = 0, z = this.owner.keys_.length; k < z; k++) {\n        var option = tart.DropdownBuilder.templates.option(\n            this.owner.keys_[k], this.owner.values_[k], (k == this.owner.getActiveItemIndex()));\n        opts.push(option);\n    }\n    var finalDOM = tart.DropdownBuilder.templates.container(this.id_, opts.join(''));\n    this.$dom = $(finalDOM);\n    this.$dom.change(function() {\n        owner.switchIndex($(this).attr('selectedIndex'));\n    });\n};\n\n\n/**\n * Generates a single option element which ready-to-use in a HTML select menu element.\n *\n * @param {string|number} key Option value.\n * @param {string|number} value Option value.\n * @param {boolean} selected Whether the option is selected.\n * @return {string} the option HTML.\n */\ntart.DropdownBuilder.templates.option = function(key, value, selected) {\n    var active = (selected) ? ' selected=\"selected\"' : '';\n    return '<option value=\"' + key + '\"' + active + '>' + value + '</option>';\n};\n\n\n/**\n * Sets an select option's \"selected\" property to True.\n *\n * @param {number} newIndex the new index of the element to set the dropdown list to.\n */\ntart.DropdownBuilder.prototype.changeActiveItem = function(newIndex) {\n    this.$dom.attr('selectedIndex', newIndex).change();\n};\n\n\n/**\n * Removes a single select option from DOM by index which given as parameter.\n *\n * @param {number} index the index of the element to remove from the list.\n */\ntart.DropdownBuilder.prototype.removeOption = function(index) {\n    this.$dom.children().eq(index).remove();\n};\n\n\n/**\n * Creates a single select option and attachs it to the current DOM.\n *\n * @param {string|number} key value for the option.\n * @param {string|number} value Text for the option.\n * @return {jQueryObject} the jQuery object that holds the DOM object of the dropdown list.\n */\ntart.DropdownBuilder.prototype.addOption = function(key, value) {\n    return this.$dom.append(tart.DropdownBuilder.templates.option(key, value, false));\n};\n\n\n/**\n * @inheritDoc\n */\ntart.DropdownBuilder.prototype.removeDOM = function() {\n    this.$dom.remove();\n};\n","undoManager":{"mark":-1,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":128,"column":0},"action":"insert","lines":["// Copyright 2011 Tart. All Rights Reserved.","//","// Licensed under the Apache License, Version 2.0 (the \"License\");","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//      http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS-IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","","/**"," * @fileoverview Builder class for dropdown lists."," */","goog.require('tart.Builder');","goog.provide('tart.DropdownBuilder');","","","","/**"," * DropdownBuilder class builds the DOM for DropdownList class."," *"," * @constructor"," * @extends {tart.Builder}"," * @param {string} id id for the builder. Can be used as the id of the DOM element this builder will build."," * @return {tart.DropdownBuilder} A builder object."," */","tart.DropdownBuilder = function(id) {","    goog.base(this, id);","    this.owner = null;","    return this;","};","goog.inherits(tart.DropdownBuilder, tart.Builder);","","","/**"," * Main namespace of HTML templates for DOM structure."," */","tart.DropdownBuilder.templates = {};","","","/**"," * Select menu template."," * @param {string} id Id of the container."," * @param {string} optionListHTML HTML of the list of options."," * @return {string} the container HTML."," */","tart.DropdownBuilder.templates.container = function(id, optionListHTML) {","    return '<select id=\"' + id + '\">' + optionListHTML + '</select>';","};","","","/**"," * Generates a select menu element, converts it to a jQuery object and passes to this.$dom."," *"," * @param {tart.Collection} owner Owner tart.Collection instance."," */","tart.DropdownBuilder.prototype.buildDOM = function(owner) {","    this.owner = owner;","    var opts = [];","    for (var k = 0, z = this.owner.keys_.length; k < z; k++) {","        var option = tart.DropdownBuilder.templates.option(","            this.owner.keys_[k], this.owner.values_[k], (k == this.owner.getActiveItemIndex()));","        opts.push(option);","    }","    var finalDOM = tart.DropdownBuilder.templates.container(this.id_, opts.join(''));","    this.$dom = $(finalDOM);","    this.$dom.change(function() {","        owner.switchIndex($(this).attr('selectedIndex'));","    });","};","","","/**"," * Generates a single option element which ready-to-use in a HTML select menu element."," *"," * @param {string|number} key Option value."," * @param {string|number} value Option value."," * @param {boolean} selected Whether the option is selected."," * @return {string} the option HTML."," */","tart.DropdownBuilder.templates.option = function(key, value, selected) {","    var active = (selected) ? ' selected=\"selected\"' : '';","    return '<option value=\"' + key + '\"' + active + '>' + value + '</option>';","};","","","/**"," * Sets an select option's \"selected\" property to True."," *"," * @param {number} newIndex the new index of the element to set the dropdown list to."," */","tart.DropdownBuilder.prototype.changeActiveItem = function(newIndex) {","    this.$dom.attr('selectedIndex', newIndex).change();","};","","","/**"," * Removes a single select option from DOM by index which given as parameter."," *"," * @param {number} index the index of the element to remove from the list."," */","tart.DropdownBuilder.prototype.removeOption = function(index) {","    this.$dom.children().eq(index).remove();","};","","","/**"," * Creates a single select option and attachs it to the current DOM."," *"," * @param {string|number} key value for the option."," * @param {string|number} value Text for the option."," * @return {jQueryObject} the jQuery object that holds the DOM object of the dropdown list."," */","tart.DropdownBuilder.prototype.addOption = function(key, value) {","    return this.$dom.append(tart.DropdownBuilder.templates.option(key, value, false));","};","","","/**"," * @inheritDoc"," */","tart.DropdownBuilder.prototype.removeDOM = function() {","    this.$dom.remove();","};",""]}]}]]},"ace":{"folds":[],"scrolltop":1624,"scrollleft":0,"selection":{"start":{"row":128,"column":0},"end":{"row":128,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":100,"state":"doc-start","mode":"ace/mode/javascript"}},"timestamp":1425190077643}